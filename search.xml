<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git学习</title>
    <url>/2020/05/21/Git%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Git版本控制方式"><a href="#Git版本控制方式" class="headerlink" title="Git版本控制方式"></a>Git版本控制方式</h1><ul>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521124819.png" alt="20200521124819"></li>
<li>将工作目录的代码先提交到暂存区，然后再由暂存区提交到本地仓库</li>
</ul>
<h1 id="Git命令行操作"><a href="#Git命令行操作" class="headerlink" title="Git命令行操作"></a>Git命令行操作</h1><h2 id="本地库操作"><a href="#本地库操作" class="headerlink" title="本地库操作"></a>本地库操作</h2><h3 id="本地库初始化"><a href="#本地库初始化" class="headerlink" title="本地库初始化"></a>本地库初始化</h3><ul>
<li><p>进入到需要建立本地仓库的文件夹，执行<code>git init</code>命令，初始化后会生成隐藏文件夹.git</p>
<ul>
<li>注意：.git文件中存放的是本地库相关的子目录和文件，不要删除，也不要胡乱修改。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h4><ul>
<li><p>状态查看操作</p>
<ul>
<li><code>git status</code></li>
<li>查看工作区、暂存区状态</li>
</ul>
</li>
<li><p>添加操作</p>
<ul>
<li><code>git add [file name]</code></li>
<li>将工作区的“新建/修改”添加到暂存区</li>
</ul>
</li>
<li><p>提交操作</p>
<ul>
<li><code>git commit -m &quot;commit message&quot; [file name]</code></li>
<li>将暂存区的内容提交到本地库</li>
</ul>
</li>
<li><p><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521161438.png" alt="20200521161438"></p>
</li>
<li><p>查看历史记录</p>
<ul>
<li><p><code>git log</code></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521162217.png" alt="20200521162217"></p>
</li>
<li><p>多屏显示控制方式：</p>
<ul>
<li>空格向下翻页</li>
<li>b 向上翻页</li>
<li>q 退出</li>
</ul>
</li>
<li><p><code>git log --pretty=oneline</code></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521162537.png" alt="20200521162537"></p>
</li>
<li><p><code>git log --oneline</code></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521162712.png" alt="20200521162712"></p>
</li>
<li><p><code>git reflog</code></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521162815.png" alt="20200521162815"></p>
<ul>
<li>HEAD@{移动到当前版本需要多少步}</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h4 id="版本前进回退操作"><a href="#版本前进回退操作" class="headerlink" title="版本前进回退操作"></a>版本前进回退操作</h4><ul>
<li><p><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521164232.png" alt="20200521164232"></p>
</li>
<li><p><strong>基于索引值操作（最常用、推荐）</strong></p>
<ul>
<li><code>git reset --hard [局部索引值]</code></li>
<li><code>git reset --hard f932af0</code></li>
</ul>
</li>
<li><p>使用<code>^</code>符号：只能后退</p>
<ul>
<li><code>git reset --hard HEAD^</code></li>
<li>注意：一个<code>^</code>表示后退一步，n个表示后退n步</li>
</ul>
</li>
<li><p>使用<code>~</code>符号：只能后退</p>
<ul>
<li><code>git reset --hard HEAD~n</code></li>
<li>注意：表示后退n步</li>
</ul>
</li>
</ul>
<hr>
<h4 id="reset命令的三个参数对比"><a href="#reset命令的三个参数对比" class="headerlink" title="reset命令的三个参数对比"></a>reset命令的三个参数对比</h4><ul>
<li><p><code>--soft</code>参数</p>
<ul>
<li>仅仅在本地库移动HEDA指针</li>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521170218.png" alt="20200521170218"></li>
</ul>
</li>
<li><p><code>--mixed</code>参数</p>
<ul>
<li>在本地库移动HEAD指针</li>
<li>重置暂存区</li>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521170444.png" alt="20200521170444"></li>
</ul>
</li>
<li><p><code>--hard</code>参数</p>
<ul>
<li>在本地库移动HEDA指针</li>
<li>重置暂存区</li>
<li>重置工作区</li>
</ul>
</li>
</ul>
<hr>
<h4 id="删除文件并找回"><a href="#删除文件并找回" class="headerlink" title="删除文件并找回"></a>删除文件并找回</h4><ul>
<li>前提：删除前，文件存在时的状态提交到了本地库</li>
<li>操作：<code>git reset --hard [版本索引]</code></li>
</ul>
<hr>
<h4 id="比较文件差异"><a href="#比较文件差异" class="headerlink" title="比较文件差异"></a>比较文件差异</h4><ul>
<li><p><code>git diff [file name]</code></p>
<ul>
<li>将工作区中的文件和暂存区进行比较</li>
</ul>
</li>
<li><p><code>git diff [版本索引] [file name]</code></p>
<ul>
<li>将工作区中的文件和本地库历史记录进行比较</li>
</ul>
</li>
<li><p><code>git diff</code>  即不带文件名</p>
<ul>
<li>比较多个文件</li>
</ul>
</li>
</ul>
<hr>
<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="什么是分支"><a href="#什么是分支" class="headerlink" title="什么是分支"></a>什么是分支</h4><p>在版本控制中，使用多条线同时推进多个任务</p>
<ul>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521173339.png" alt="20200521173339"></li>
</ul>
<h4 id="分支的好处"><a href="#分支的好处" class="headerlink" title="分支的好处"></a>分支的好处</h4><ul>
<li>同时并行推进多个功能开发，提高开发效率</li>
<li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支由任何影响。失败的分支删除重新开始即可</li>
</ul>
<hr>
<h4 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h4><ul>
<li><p>创建分支</p>
<ul>
<li><code>git branch [分支名]</code></li>
</ul>
</li>
<li><p>查看分支</p>
<ul>
<li><p><code>git branch -v</code></p>
</li>
<li><p>查看远程分支</p>
<ul>
<li><code>git branch -r</code></li>
</ul>
</li>
<li><p>查看所有分支</p>
<ul>
<li><code>git branch -a</code></li>
</ul>
</li>
</ul>
</li>
<li><p>切换分支</p>
<ul>
<li><code>git checkout [分支名]</code></li>
</ul>
</li>
<li><p>将新分支推送到GitHub</p>
<ul>
<li><code>git push origin [分支名]</code></li>
</ul>
</li>
<li><p>删除本地分支</p>
<ul>
<li><code>git branch -d [分支名]</code></li>
</ul>
</li>
<li><p>删除Github远程分支</p>
<ul>
<li><code>git push origin :[分支名]</code></li>
<li>分支名前的<code>:</code>代表删除</li>
</ul>
</li>
<li><p>合并分支</p>
<ul>
<li><p>切换到接受修改的分支（被合并，增加新内容）上</p>
<ul>
<li><code>git checkout [被合并分支名]</code></li>
</ul>
</li>
<li><p>执行<code>merge</code>命令</p>
<ul>
<li><code>git merge [有新内容分支名]</code></li>
</ul>
</li>
</ul>
</li>
<li><p>强制提交本地分支覆盖远程分支</p>
<ul>
<li><code>git push origin [分支名] --force</code></li>
</ul>
</li>
<li><p>解决冲突</p>
<ul>
<li><p>分支的表现</p>
<ul>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521174938.png" alt="20200521174938"></li>
</ul>
</li>
<li><p>冲突的解决</p>
<ul>
<li><p>编辑文件，删除特殊符号</p>
</li>
<li><p>把文件修改到满意的程度，保存退出</p>
</li>
<li><p><code>git add [文件名]</code></p>
</li>
<li><p><code>git commit -m &quot;日志信息&quot;</code></p>
<ul>
<li>注意：此时commit一定不能带具体文件名</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="GitHub远程库操作"><a href="#GitHub远程库操作" class="headerlink" title="GitHub远程库操作"></a>GitHub远程库操作</h2><h3 id="将本地库与远程库关联"><a href="#将本地库与远程库关联" class="headerlink" title="将本地库与远程库关联"></a>将本地库与远程库关联</h3><ul>
<li><p>查看远程库地址</p>
<ul>
<li><code>git remote -v</code></li>
</ul>
</li>
<li><p>关联远程库</p>
<ul>
<li><code>git remote add origin https://github.com/xxx/xxx.git</code></li>
<li><code>origin</code>即远程库地址的别名，用<code>origin</code>来代表远程库地址</li>
<li></li>
</ul>
</li>
<li><p><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200526162939.png" alt="20200526162939"></p>
</li>
</ul>
<hr>
<h3 id="推送操作"><a href="#推送操作" class="headerlink" title="推送操作"></a>推送操作</h3><ul>
<li><p><code>git push origin [分支名]</code></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200526163515.png" alt="20200526163515"></p>
</li>
</ul>
<hr>
<h3 id="克隆操作"><a href="#克隆操作" class="headerlink" title="克隆操作"></a>克隆操作</h3><ul>
<li><p>命令</p>
<ul>
<li><code>git clone [远程地址]</code></li>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200526164254.png" alt="20200526164254"></li>
</ul>
</li>
<li><p>效果</p>
<ul>
<li>完整的把远程库下载到本地</li>
<li>创建origin远程地址别名</li>
<li>初始化本地库</li>
</ul>
</li>
</ul>
<hr>
<h3 id="团队成员邀请"><a href="#团队成员邀请" class="headerlink" title="团队成员邀请"></a>团队成员邀请</h3><ul>
<li><p>项目仓库下settings-&gt;Collaborators</p>
</li>
<li><p>搜索需要添加的团队成员</p>
<ul>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200526165226.png" alt="20200526165226"></li>
</ul>
</li>
<li><p>复制邀请链接发送给需要添加的团队成员</p>
<ul>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200526165318.png" alt="20200526165318"></li>
</ul>
</li>
<li><p>需要添加的团队成员通过邀请链接接受邀请</p>
<ul>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200526165540.png" alt="20200526165540"></li>
</ul>
</li>
<li><p>成为团队成员就可正常推送，操作远程库</p>
</li>
</ul>
<hr>
<h3 id="远程库修改的拉取"><a href="#远程库修改的拉取" class="headerlink" title="远程库修改的拉取"></a>远程库修改的拉取</h3><ul>
<li><p>pull = fetch + merge</p>
</li>
<li><p><code>git fetch [远程库地址别名origin] [远程分支名]</code></p>
</li>
<li><p><code>git merge [远程库地址别名origin] [远程分支名]</code></p>
</li>
<li><p>拉取远程库</p>
<ul>
<li><code>git pull origin [远程分支名]</code></li>
</ul>
</li>
</ul>
<hr>
<h3 id="协同开发冲突的解决"><a href="#协同开发冲突的解决" class="headerlink" title="协同开发冲突的解决"></a>协同开发冲突的解决</h3><ul>
<li><p>要点</p>
<ul>
<li>如果不是基于GitHub远程库的最新版所做的修改，不能推送，必须先拉取</li>
<li>拉取下来后如果进入冲突状态，则按照“分支冲突解决”操作即可</li>
</ul>
</li>
</ul>
<hr>
<h3 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h3><p>例如：<strong>团队B在团队A的基础上开发</strong></p>
<h4 id="团队B"><a href="#团队B" class="headerlink" title="团队B"></a>团队B</h4><ul>
<li><p>进入团队A的项目仓库</p>
<ul>
<li><p>fork</p>
<ul>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200526171907.png" alt="20200526171907"></li>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200526172111.png" alt="20200526172111"></li>
</ul>
</li>
<li><p>本地修改，然后推送到远程</p>
</li>
<li><p>pull request</p>
<ul>
<li>Pull request-&gt;New pull request-&gt;Create pull request(包含日志信息)</li>
</ul>
</li>
<li><p>开发完成</p>
</li>
</ul>
</li>
</ul>
<h4 id="团队A"><a href="#团队A" class="headerlink" title="团队A"></a>团队A</h4><ul>
<li><p>进入项目仓库</p>
<ul>
<li><p>审核</p>
<ul>
<li>Commits查看提交</li>
<li>Files changed 查看文件变化</li>
</ul>
</li>
<li><p>pull request</p>
<ul>
<li><p>Pull request-&gt;点击团队B的pull request</p>
</li>
<li><p>可以comment交流</p>
</li>
<li><p>审核</p>
<ul>
<li>Commits查看提交</li>
<li>Files changed 查看文件变化</li>
</ul>
</li>
<li><p>Merge pull request</p>
</li>
<li><p>添加日志信息</p>
</li>
<li><p>Confirm merge</p>
</li>
<li><p>合并完成</p>
</li>
<li><p>将远程库修改拉取到本地</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="配置SSH免密登录"><a href="#配置SSH免密登录" class="headerlink" title="配置SSH免密登录"></a>配置SSH免密登录</h3><ul>
<li><p>进入家目录</p>
<ul>
<li><code>cd ~</code></li>
</ul>
</li>
<li><p>删除之前的.ssh目录</p>
<ul>
<li><code>rm -r .ssh/</code></li>
</ul>
</li>
<li><p>生成.ssh目录</p>
<ul>
<li><code>ssh-keygen -t rsa -C  [邮箱信息]</code></li>
<li>默认回车</li>
</ul>
</li>
<li><p>进入.ssh目录</p>
<ul>
<li><code>cd .ssh/</code></li>
</ul>
</li>
<li><p>将<code>id_rsa.pub</code>文件中的内容复制</p>
</li>
<li><p>在Github上Settings-&gt;SSH and GPG keys-&gt;New SSH key-&gt;将复制内容粘贴-&gt;Add SSH key</p>
</li>
<li><p>新建远程库地址别名</p>
<ul>
<li><code>git remote add origin [仓库SSH的值]</code></li>
</ul>
</li>
<li><p>完成推送</p>
</li>
<li><p>不需要输入账户密码，配置完成</p>
</li>
</ul>
<hr>
<h1 id="Git在IDEA工具中的使用"><a href="#Git在IDEA工具中的使用" class="headerlink" title="Git在IDEA工具中的使用"></a>Git在IDEA工具中的使用</h1><ul>
<li><a href="https://www.bilibili.com/video/BV16E411N7pe" target="_blank" rel="noopener">Git在IDEA工具中的使用</a></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Swagger2用法</title>
    <url>/2020/09/04/Swagger2%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h2 id="Swagger2简介"><a href="#Swagger2简介" class="headerlink" title="Swagger2简介"></a>Swagger2简介</h2><ul>
<li>SpringBoot快速开发，便捷部署，一般会构建RESTful API</li>
<li>构建RESTful API的目的通常都是由于多终端的原因，这些终端会共用很多底层业务逻辑，因此我们会抽象出这样一层来同时服务于多个移动端或者Web前端</li>
<li>RESTful API就有可能要面对多个开发人员或多个开发团队：IOS开发、Android开发或是Web开发等。为了减少与其他团队平时开发期间的频繁沟通成本，传统做法我们会创建一份RESTful API文档来记录所有接口细节</li>
<li>传统接口文档存在问题：<ul>
<li>由于接口众多，并且细节复杂（需要考虑不同的HTTP请求类型、HTTP头部信息、HTTP请求内容等），高质量地创建这份文档本身就是件非常吃力的事</li>
<li>随着时间推移，不断修改接口实现的时候都必须同步修改接口文档，而文档与代码又处于两个不同的媒介，除非有严格的管理机制，不然很容易导致不一致现象</li>
</ul>
</li>
<li>为了解决上面这样的问题，本文将介绍RESTful API的重磅好伙伴Swagger2，它可以轻松的整合到Spring Boot中，并与Spring MVC程序配合组织出强大RESTful API文档。它既可以减少我们创建文档的工作量，同时说明内容又整合入实现代码中，让维护文档和修改代码整合为一体，可以让我们在修改代码逻辑的同时方便的修改文档说明。另外Swagger2也提供了强大的页面测试功能来调试每个RESTful API</li>
<li><a href="https://swagger.io/" target="_blank" rel="noopener">Swagger2官方文档</a></li>
</ul>
<hr>
<h2 id="Swagger2使用"><a href="#Swagger2使用" class="headerlink" title="Swagger2使用"></a>Swagger2使用</h2><h3 id="SpringBoot-Maven依赖"><a href="#SpringBoot-Maven依赖" class="headerlink" title="SpringBoot Maven依赖"></a>SpringBoot Maven依赖</h3>  <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;$&#123;swagger2.vresion&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;$&#123;swagger2.vresion&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Swagger2配置"><a href="#Swagger2配置" class="headerlink" title="Swagger2配置"></a>Swagger2配置</h3><ul>
<li>使用用Swagger2要提供一个实例化Docket的Bean</li>
<li>通过<code>@EnableSwagger2</code>注解启用Swagger2</li>
<li>配置一个Docket Bean <ul>
<li>配置映射路径和要扫描的接口位置</li>
<li><code>apiInfo</code>中配置Swagger2文档网站的信息<ul>
<li>网站的title</li>
<li>网站的描述</li>
<li>网站的信息</li>
<li>网站使用的协议</li>
</ul>
</li>
</ul>
</li>
<li>访问地址：<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a></li>
<li>配置类：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Configuration</span></span><br><span class="line">    <span class="meta">@EnableSwagger</span>2</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                    .pathMapping(<span class="string">"/"</span>)</span><br><span class="line">                    .select()</span><br><span class="line">                    .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.nvn.controller"</span>))</span><br><span class="line">                    .paths(PathSelectors.any())</span><br><span class="line">                    .build().apiInfo(<span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                            .title(<span class="string">"SpringBoot整合Swagger"</span>)</span><br><span class="line">                            .description(<span class="string">"SpringBoot整合Swagger，详细信息......"</span>)</span><br><span class="line">                            .version(<span class="string">"9.0"</span>)</span><br><span class="line">                            .contact(<span class="keyword">new</span> Contact(<span class="string">"啊啊啊啊"</span>,<span class="string">"blog.csdn.net"</span>,<span class="string">"aaa@gmail.com"</span>))</span><br><span class="line">                            .license(<span class="string">"The Apache License"</span>)</span><br><span class="line">                            .licenseUrl(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">                            .build());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ``` </span><br><span class="line"></span><br><span class="line">### Swagger2项目中的使用</span><br><span class="line"></span><br><span class="line">- 创建接口</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  <span class="meta">@RestController</span></span><br><span class="line">  <span class="meta">@Api</span>(tags = <span class="string">"用户管理相关接口"</span>)</span><br><span class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@PostMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">      <span class="meta">@ApiOperation</span>(<span class="string">"添加用户的接口"</span>)</span><br><span class="line">      <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">              <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"username"</span>, value = <span class="string">"用户名"</span>, defaultValue = <span class="string">"李四"</span>),</span><br><span class="line">              <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"address"</span>, value = <span class="string">"用户地址"</span>, defaultValue = <span class="string">"深圳"</span>, required = <span class="keyword">true</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      )</span><br><span class="line">      <span class="function"><span class="keyword">public</span> RespBean <span class="title">addUser</span><span class="params">(String username, @RequestParam(required = <span class="keyword">true</span>)</span> String address) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> RespBean();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">      <span class="meta">@ApiOperation</span>(<span class="string">"根据id查询用户的接口"</span>)</span><br><span class="line">      <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户id"</span>, defaultValue = <span class="string">"99"</span>, required = <span class="keyword">true</span>)</span><br><span class="line">      <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(@PathVariable Integer id)</span> </span>&#123;</span><br><span class="line">          User user = <span class="keyword">new</span> User();</span><br><span class="line">          user.setId(id);</span><br><span class="line">          <span class="keyword">return</span> user;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="meta">@PutMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line">      <span class="meta">@ApiOperation</span>(<span class="string">"根据id更新用户的接口"</span>)</span><br><span class="line">      <span class="function"><span class="keyword">public</span> User <span class="title">updateUserById</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> user;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;``` </span><br><span class="line"></span><br><span class="line">- 注解说明：</span><br><span class="line">  - `<span class="meta">@Api</span>`:标记当前Controller的功能</span><br><span class="line">  - `<span class="meta">@ApiOperation</span>`:标记一个方法的作用</span><br><span class="line">  - `<span class="meta">@APiImplicitParam</span>`:描述一个参数，可以配置参数的中文含义，也可以给参数设置默认值</span><br><span class="line">    - 如果有多个参数，则需要使用多个`<span class="meta">@ApiImplicitParm</span>`注解来描述</span><br><span class="line">    - 多个注解`<span class="meta">@ApiImplicitParam</span>`需要放在一个`<span class="meta">@ApiImplicitParams</span>`注解中</span><br><span class="line">  - 注意：</span><br><span class="line">    - 需要注意的是，`<span class="meta">@ApiImplicitParam</span>`注解中虽然可以指定参数是必填的，但是却不能代替`<span class="meta">@RequestParam</span>(required = <span class="keyword">true</span>)`，前者的必填只是在Swagger2框架内必填，抛弃了Swagger2，这个限制就没用了，所以假如开发者需要指定一个参数必填，<span class="meta">@RequestParam</span>(required = <span class="keyword">true</span>)注解还是不能省略</span><br><span class="line">  - 如果参数是一个对象（例如上文的更新接口），对于参数的描述也可以放在实体类中</span><br><span class="line"></span><br><span class="line">      ```java</span><br><span class="line">      <span class="meta">@ApiModel</span></span><br><span class="line">      <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">          <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户id"</span>)</span><br><span class="line">          <span class="keyword">private</span> Integer id;</span><br><span class="line">          <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户名"</span>)</span><br><span class="line">          <span class="keyword">private</span> String username;</span><br><span class="line">          <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户地址"</span>)</span><br><span class="line">          <span class="keyword">private</span> String address;</span><br><span class="line">          <span class="comment">//getter/setter</span></span><br><span class="line">      &#125;</span><br><span class="line">      ``` </span><br><span class="line">- 访问Swagger2访问地址</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">## 项目使用总结</span><br><span class="line"></span><br><span class="line">### 配合shiro鉴权的Swagger2配置</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@author</span> LvHao</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@Description</span> : swagger2配置的抽象类  需要被继承</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@date</span> 2020-08-09 16:37</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line">  <span class="meta">@EnableSwagger</span>2</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Docket <span class="title">docket</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                  .groupName(<span class="string">"HZAU-Smart-Agriculture日志信息接口"</span>)</span><br><span class="line">                  .apiInfo(apiInfo())</span><br><span class="line">                  .select()</span><br><span class="line">                  .apis(RequestHandlerSelectors.basePackage(<span class="string">"hzau.sa.msg"</span>))</span><br><span class="line">                  .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation<span class="class">.<span class="keyword">class</span>))</span></span><br><span class="line"><span class="class">                  .<span class="title">build</span>().<span class="title">securitySchemes</span>(<span class="title">securitySchemes</span>())</span></span><br><span class="line"><span class="class">                  .<span class="title">securityContexts</span>(<span class="title">securityContexts</span>())</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 配置swagger2信息 apiInfo</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                  .title(<span class="string">"接口管理平台"</span>)</span><br><span class="line">                  .description(<span class="string">"接口管理及测试"</span>)</span><br><span class="line">                  .version(<span class="string">"v1.0"</span>)</span><br><span class="line">                  .build();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> List&lt;ApiKey&gt; <span class="title">securitySchemes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> newArrayList(<span class="keyword">new</span> ApiKey(<span class="string">"token"</span>, <span class="string">"token"</span>, <span class="string">"header"</span>));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> List&lt;SecurityContext&gt; <span class="title">securityContexts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> newArrayList(SecurityContext.builder().securityReferences(defaultAuth())</span><br><span class="line">                  .forPaths(PathSelectors.regex(<span class="string">"^(?!auth).*$"</span>)).build());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="function">List&lt;SecurityReference&gt; <span class="title">defaultAuth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          AuthorizationScope authorizationScope = <span class="keyword">new</span> AuthorizationScope(<span class="string">"global"</span>, <span class="string">"accessEverything"</span>);</span><br><span class="line">          AuthorizationScope[] authorizationScopes = <span class="keyword">new</span> AuthorizationScope[<span class="number">1</span>];</span><br><span class="line">          authorizationScopes[<span class="number">0</span>] = authorizationScope;</span><br><span class="line">          <span class="keyword">return</span> newArrayList(<span class="keyword">new</span> SecurityReference(<span class="string">"token"</span>, authorizationScopes));</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ``` </span><br><span class="line"></span><br><span class="line">- 这里是写了一个Swagger2抽象配置类，某块要使用Swagger2可以实现该抽象类</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  <span class="meta">@Configuration</span></span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BackStageSwagger</span> <span class="keyword">extends</span> <span class="title">Swagger2Config</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Docket <span class="title">backStageDocket</span><span class="params">()</span></span>&#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                  .groupName(<span class="string">"HZAU-Smart-Agriculture 平台设置接口"</span>)</span><br><span class="line">                  .apiInfo(apiInfo())</span><br><span class="line">                  .select()</span><br><span class="line">                  .apis(RequestHandlerSelectors.basePackage(<span class="string">"hzau.sa.backstage"</span>))</span><br><span class="line">                  .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation<span class="class">.<span class="keyword">class</span>))</span></span><br><span class="line"><span class="class">                  .<span class="title">build</span>().<span class="title">securitySchemes</span>(<span class="title">securitySchemes</span>())</span></span><br><span class="line"><span class="class">                  .<span class="title">securityContexts</span>(<span class="title">securityContexts</span>())</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  ``` </span><br><span class="line"></span><br><span class="line">- 抽象配置类中加入了安全校验shiro的一些需求</span><br><span class="line">  - 这些都是在提供的Docket Bean 中具体实现的</span><br><span class="line"></span><br><span class="line">### Controller层各种使用方法</span><br><span class="line"></span><br><span class="line">- 普通查询方式传参</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  <span class="meta">@ApiOperation</span>(<span class="string">"视频监控设置查询"</span>)</span><br><span class="line">  <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">          <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"page"</span>,value = <span class="string">"页数（默认1 可为null）"</span>,paramType = <span class="string">"query"</span>,dataType = <span class="string">"String"</span>),</span><br><span class="line">          <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"limit"</span>,value = <span class="string">"容量（默认20 可为null）"</span>,paramType = <span class="string">"query"</span>,dataType = <span class="string">"String"</span>),</span><br><span class="line">          <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"keyword"</span>,value = <span class="string">"名称和编号关键字"</span>,paramType = <span class="string">"query"</span>,dataType = <span class="string">"String"</span>),</span><br><span class="line">          <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"baseName"</span>,value = <span class="string">"基地名称"</span>,paramType = <span class="string">"query"</span>,dataType = <span class="string">"String"</span>),</span><br><span class="line">          <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"regionName"</span>,value = <span class="string">"区域名称"</span>,paramType = <span class="string">"query"</span>,dataType = <span class="string">"String"</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/query"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Result&lt;Object&gt; <span class="title">queryAllVideoMonitor</span><span class="params">(String keyword,String baseName,String regionName)</span></span>&#123;</span><br><span class="line">      Page&lt;VideoMonitorModel&gt; page =  getPage();</span><br><span class="line">      <span class="comment">//TODO...</span></span><br><span class="line">  &#125;</span><br><span class="line">  ``` </span><br><span class="line">- 实体json传参</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  <span class="meta">@ApiOperation</span>(<span class="string">"新增视频监控"</span>)</span><br><span class="line">  <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"videoMonitorDTO"</span>,value = <span class="string">"新增视频监控实体(主键自增）"</span>,paramType = <span class="string">"body"</span>,dataType = <span class="string">"VideoMonitorDTO"</span>)</span><br><span class="line">  <span class="meta">@PostMapping</span>(<span class="string">"/insert"</span>)</span><br><span class="line">  <span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">Result</span>&lt;<span class="title">Object</span>&gt; <span class="title">insertVideoMonitor</span>(@<span class="title">Valid</span> @<span class="title">RequestBody</span> <span class="title">VideoMonitorDTO</span> <span class="title">videoMonitorDTO</span>, <span class="title">BindingResult</span> <span class="title">result</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(result.hasErrors())&#123;</span><br><span class="line">          <span class="keyword">return</span> ResultUtil.paramError();</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          Object savePoint = <span class="keyword">null</span>;</span><br><span class="line">          <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">          <span class="keyword">try</span>&#123;</span><br><span class="line">              <span class="comment">//TODO...</span></span><br><span class="line">          &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">              TransactionAspectSupport.currentTransactionStatus().rollbackToSavepoint(savePoint);</span><br><span class="line">              <span class="keyword">return</span> ResultUtil.databaseError(e.toString());</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> ResultUtil.success(flag);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ``` </span><br><span class="line">- Get请求路径url带参数</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  <span class="meta">@SysLog</span>(prefix = <span class="string">"根据主键删除视频监控"</span>,value = LogType.ALL)</span><br><span class="line">  <span class="meta">@ApiOperation</span>(<span class="string">"根据主键删除视频监控"</span>)</span><br><span class="line">  <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>,value = <span class="string">"视频监控主键"</span>,required = <span class="keyword">true</span>,paramType = <span class="string">"path"</span>,dataType = <span class="string">"String"</span>)</span><br><span class="line">  <span class="meta">@DeleteMapping</span>(<span class="string">"/delete/&#123;id&#125;"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Result&lt;Object&gt; <span class="title">deleteById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> String id)</span>&#123;</span><br><span class="line">      <span class="comment">//TODO...</span></span><br><span class="line">  &#125;</span><br><span class="line">  ``` </span><br><span class="line">- FormData形式传参,一般包含`MultipartFile`</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  <span class="meta">@ApiOperation</span>(value = <span class="string">"更新作物"</span>, notes = <span class="string">"更新作物"</span>)</span><br><span class="line">  <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">          <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"cropId"</span>, value = <span class="string">"作物id"</span>, required = <span class="keyword">true</span>, paramType = <span class="string">"form"</span>, dataType = <span class="string">"String"</span>),</span><br><span class="line">          <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"cropName"</span>, value = <span class="string">"作物名"</span>, required = <span class="keyword">true</span>, paramType = <span class="string">"form"</span>, dataType = <span class="string">"String"</span>),</span><br><span class="line">          <span class="comment">//@ApiImplicitParam(name = "picture", value = "图片" , paramType = "form", dataType = "MultipartFile")</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="meta">@PostMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Result <span class="title">update</span><span class="params">(<span class="keyword">int</span> cropId,String cropName ,@ApiParam MultipartFile picture)</span></span>&#123;</span><br><span class="line">      <span class="comment">//TODO...</span></span><br><span class="line">  &#125;</span><br><span class="line">  ``` </span><br><span class="line">- 数组形式传参</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  <span class="meta">@ApiOperation</span>(<span class="string">"批量删除视频监控"</span>)</span><br><span class="line">  <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"ids[]"</span>,value = <span class="string">"视频监控主键数组"</span>,required = <span class="keyword">true</span>,paramType = <span class="string">"query"</span>,allowMultiple = <span class="keyword">true</span>,dataType = <span class="string">"String"</span>)</span><br><span class="line">  <span class="meta">@DeleteMapping</span>(<span class="string">"/deletes"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Result&lt;Object&gt; <span class="title">delete</span><span class="params">(@RequestParam(<span class="string">"ids[]"</span>)</span> String[] ids)</span>&#123;</span><br><span class="line">      <span class="comment">//TODO...</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h3 id="Swagger2实际使用问题"><a href="#Swagger2实际使用问题" class="headerlink" title="Swagger2实际使用问题"></a>Swagger2实际使用问题</h3><ul>
<li><p>无法识别java中<code>Integer[]</code>类型</p>
<pre><code class="java"><span class="meta">@ApiImplicitParam</span>(name = <span class="string">"ids[]"</span>,value = <span class="string">"视频监控主键数组"</span>,required = <span class="keyword">true</span>,paramType = <span class="string">"query"</span>,allowMultiple = <span class="keyword">true</span>,dataType = <span class="string">"Integer"</span>)</code></pre>
<ul>
<li>报WARN：<code>WARN 16868 --- [           main] s.d.s.w.r.p.ParameterDataTypeReader      : Trying to infer dataType java.lang.Integer[]</code></li>
</ul>
</li>
<li><p>单个<code>MultipartFile</code>可以正常识别，但多个<code>MultipartFile</code>识别为空</p>
<ul>
<li>Swagger2不能测试多个文件的FormData参数，但是功能正常</li>
<li>使用Postman可以正常测试</li>
</ul>
</li>
<li><p>Swangger2无法正常识别java中<code>MultipartFile</code>类型</p>
<ul>
<li><p>文件参数上传方式</p>
<pre><code class="java"><span class="meta">@ApiOperation</span>(<span class="string">"新增病虫害百科"</span>)
<span class="meta">@ApiImplicitParams</span>({
        <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"diseaseInsectName"</span>,value = <span class="string">"病虫害名称"</span>,required = <span class="keyword">true</span>,paramType = <span class="string">"form"</span>,dataType = <span class="string">"String"</span>),
        <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"diseaseInsectAlias"</span>,value = <span class="string">"病虫害别名"</span>,paramType = <span class="string">"form"</span>,dataType = <span class="string">"String"</span>),
        <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"diseaseInsectLabel"</span>,value = <span class="string">"病虫害标示"</span>,required = <span class="keyword">true</span>,paramType = <span class="string">"form"</span>,dataType = <span class="string">"String"</span>),
        <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"wikiCategoryId"</span>,value = <span class="string">"百科Id"</span>,required = <span class="keyword">true</span>,paramType = <span class="string">"form"</span>,dataType = <span class="string">"String"</span>),
        <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"wikiCropTypeId"</span>,value = <span class="string">"百科植物Id"</span>,required = <span class="keyword">true</span>,paramType = <span class="string">"form"</span>,dataType = <span class="string">"String"</span>),
        <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"diseaseInsectIntroduction"</span>,value = <span class="string">"病虫害简介"</span>,paramType = <span class="string">"form"</span>,dataType = <span class="string">"String"</span>),
        <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"plantSymptom"</span>,value = <span class="string">"植物症状"</span>,paramType = <span class="string">"form"</span>,dataType = <span class="string">"String"</span>),
        <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"morphologyFeature"</span>,value = <span class="string">"形态特征"</span>,paramType = <span class="string">"form"</span>,dataType = <span class="string">"String"</span>),
        <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"livingHabit"</span>,value = <span class="string">"生活习性"</span>,paramType = <span class="string">"form"</span>,dataType = <span class="string">"String"</span>),
        <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"propagationPath"</span>,value = <span class="string">"传播途径"</span>,paramType = <span class="string">"form"</span>,dataType = <span class="string">"String"</span>),
        <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"occurrenceRegularity"</span>,value = <span class="string">"发生规律"</span>,paramType = <span class="string">"form"</span>,dataType = <span class="string">"String"</span>),
        <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"agricultureControl"</span>,value = <span class="string">"农业防治"</span>,paramType = <span class="string">"form"</span>,dataType = <span class="string">"String"</span>),
        <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"chemistryControl"</span>,value = <span class="string">"化学防治"</span>,paramType = <span class="string">"form"</span>,dataType = <span class="string">"String"</span>)
})
<span class="meta">@PostMapping</span>(<span class="string">"/insert"</span>)
<span class="meta">@Transactional</span>(rollbackFor = Exception<span class="class">.<span class="keyword">class</span>)</span>
<span class="class"><span class="title">public</span> <span class="title">Result</span>&lt;<span class="title">Object</span>&gt; <span class="title">insertDiseaseInsect</span>(<span class="title">String</span> <span class="title">diseaseInsectName</span>,</span>
<span class="class">                                          <span class="title">String</span> <span class="title">diseaseInsectAlias</span>,</span>
<span class="class">                                          <span class="title">String</span> <span class="title">diseaseInsectLabel</span>,</span>
<span class="class">                                          <span class="title">String</span> <span class="title">wikiCategoryId</span>,</span>
<span class="class">                                          <span class="title">String</span> <span class="title">wikiCropTypeId</span>,</span>
<span class="class">                                          <span class="title">String</span> <span class="title">diseaseInsectIntroduction</span>,</span>
<span class="class">                                          <span class="title">String</span> <span class="title">plantSymptom</span>,</span>
<span class="class">                                          <span class="title">String</span> <span class="title">morphologyFeature</span>,</span>
<span class="class">                                          <span class="title">String</span> <span class="title">livingHabit</span>,</span>
<span class="class">                                          <span class="title">String</span> <span class="title">propagationPath</span>,</span>
<span class="class">                                          <span class="title">String</span> <span class="title">occurrenceRegularity</span>,</span>
<span class="class">                                          <span class="title">String</span> <span class="title">agricultureControl</span>,</span>
<span class="class">                                          <span class="title">String</span> <span class="title">chemistryControl</span>,</span>
<span class="class">                                          @<span class="title">ApiParam</span>(<span class="title">name</span> </span>= <span class="string">"files"</span>,value = <span class="string">"图片数组"</span>) MultipartFile[] files){
    <span class="comment">//TODO...</span>
}</code></pre>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Swagger2</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot项目打成jar包读取resource下文件</title>
    <url>/2020/09/02/SpringBoot%E9%A1%B9%E7%9B%AE%E6%89%93%E6%88%90jar%E5%8C%85%E8%AF%BB%E5%8F%96resource%E4%B8%8B%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="普通模式下resource下文件的读取"><a href="#普通模式下resource下文件的读取" class="headerlink" title="普通模式下resource下文件的读取"></a>普通模式下resource下文件的读取</h1><ul>
<li>采用<code>@Value</code>注解读取</li>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file = ResourceUtils.getFile(<span class="string">"classpath:exceltmp/template_export.xls"</span>);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<hr>
<h1 id="SpringBoot项目使用mvn-package打成jar包resource下文件读取"><a href="#SpringBoot项目使用mvn-package打成jar包resource下文件读取" class="headerlink" title="SpringBoot项目使用mvn package打成jar包resource下文件读取"></a>SpringBoot项目使用mvn package打成jar包resource下文件读取</h1><ul>
<li>按照普通模式下resource文件的读取方式，jar会报错：<ul>
<li>java.io.FileNotFoundException: class path resource [exceltmp/template_export.xls] cannot be resolved to absolute file path because it does not reside in the file system:jar:file:/Users/apple/project-code/xdod-project/xdod-backend/target/xdod-backend.jar!/BOOT-INF/classes!/exceltmp/template_export.xls</li>
</ul>
</li>
<li>报错原因：<ul>
<li>Resource下的文件是存在于jar这个文件里面，在磁盘上是没有真实路径存在的，它其实是位于jar内部的一个路径。所以通过ResourceUtils.getFile或者this.getClass().getResource(“”)方法无法正确获取文件</li>
</ul>
</li>
</ul>
<hr>
<h1 id="jar包正确的resource下文件读取方式"><a href="#jar包正确的resource下文件读取方式" class="headerlink" title="jar包正确的resource下文件读取方式"></a>jar包正确的resource下文件读取方式</h1><h2 id="文本文件读取"><a href="#文本文件读取" class="headerlink" title="文本文件读取"></a>文本文件读取</h2><ul>
<li><p>采用流的方式来读取文件，对文件流进行相关的操作</p>
</li>
<li><p>SpringBoot使用<code>ClassPathResource</code>来读取文件流，将文件读取成字符串在进行二次操作</p>
</li>
<li><p>适用于：</p>
<ul>
<li>配置文件：<code>properties</code></li>
<li>文本文件: <code>txt</code></li>
<li>其他文件：<code>csv</code>,<code>SOL</code>,<code>json</code>等</li>
</ul>
</li>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String data = <span class="string">""</span>;</span><br><span class="line">ClassPathResource cpr = <span class="keyword">new</span> ClassPathResource(<span class="string">"static/file.txt"</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">byte</span>[] bdata = FileCopyUtils.copyToByteArray(cpr.getInputStream());</span><br><span class="line">      data = <span class="keyword">new</span> String(bdata, StandardCharsets.UTF_8);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      LOG.warn(<span class="string">"IOException"</span>, e);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>工具类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.ClassPathResource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassPathResourceReader</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * path:文件路径</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> JDK 1.8</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String path;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * content:文件内容</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> JDK 1.6</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClassPathResourceReader</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.path = path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (content == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ClassPathResource resource = <span class="keyword">new</span> ClassPathResource(path);</span><br><span class="line">                BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(resource.getInputStream()));</span><br><span class="line">                content = reader.lines().collect(Collectors.joining(<span class="string">"\n"</span>));</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String content = <span class="keyword">new</span> ClassPathResourceReader(<span class="string">"log4j.properties"</span>).getContent();</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="非文本文件读取"><a href="#非文本文件读取" class="headerlink" title="非文本文件读取"></a>非文本文件读取</h2><ul>
<li><p>先拿到文件本身，在对文件进行解析</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassPathResource classPathResource = <span class="keyword">new</span> ClassPathResource(<span class="string">"exceltmp/template_export.xls"</span>);</span><br><span class="line"></span><br><span class="line">InputStream inputStream = classPathResource.getInputStream();</span><br><span class="line"><span class="comment">//生成目标文件</span></span><br><span class="line">File somethingFile = File.createTempFile(<span class="string">"template_export_copy"</span>, <span class="string">".xls"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    FileUtils.copyInputStreamToFile(inputStream, somethingFile);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    IOUtils.closeQuietly(inputStream);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
</ul>
<ul>
<li><p>结合hutool工具包的使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.io.resource.ClassPathResource;</span><br><span class="line"></span><br><span class="line">FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> ClassPathResource(<span class="string">"templates/视频监控类导入模板.xls"</span>).getFile());</span><br></pre></td></tr></table></figure>
</li>
<li><p>hutool源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.hutool.core.io.resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.FileUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.lang.Assert;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.ClassUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.ObjectUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.URLUtil;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* ClassPath单一资源访问类&lt;br&gt;</span></span><br><span class="line"><span class="comment">* 传入路径path必须为相对路径，如果传入绝对路径，Linux路径会去掉开头的“/”，而Windows路径会直接报错。&lt;br&gt;</span></span><br><span class="line"><span class="comment">* 传入的path所指向的资源必须存在，否则报错</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Looly</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassPathResource</span> <span class="keyword">extends</span> <span class="title">UrlResource</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String path;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader classLoader;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; clazz;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// -------------------------------------------------------------------------------------- Constructor start</span></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 构造</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> path 相对于ClassPath的路径</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ClassPathResource</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(path, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 构造</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> path 相对于ClassPath的路径</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> classLoader &#123;<span class="doctag">@link</span> ClassLoader&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ClassPathResource</span><span class="params">(String path, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(path, classLoader, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 构造</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> path 相对于给定Class的路径</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> clazz &#123;<span class="doctag">@link</span> Class&#125; 用于定位路径</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ClassPathResource</span><span class="params">(String path, Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(path, <span class="keyword">null</span>, clazz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 构造</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> pathBaseClassLoader 相对路径</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> classLoader &#123;<span class="doctag">@link</span> ClassLoader&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> clazz &#123;<span class="doctag">@link</span> Class&#125; 用于定位路径</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">ClassPathResource</span><span class="params">(String pathBaseClassLoader, ClassLoader classLoader, Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>((URL) <span class="keyword">null</span>);</span><br><span class="line">    Assert.notNull(pathBaseClassLoader, <span class="string">"Path must not be null"</span>);</span><br><span class="line">          </span><br><span class="line">    <span class="keyword">final</span> String path = normalizePath(pathBaseClassLoader);</span><br><span class="line">    <span class="keyword">this</span>.path = path;</span><br><span class="line">    <span class="keyword">this</span>.name = StrUtil.isBlank(path) ? <span class="keyword">null</span> : FileUtil.getName(path);</span><br><span class="line">          </span><br><span class="line">    <span class="keyword">this</span>.classLoader = ObjectUtil.defaultIfNull(classLoader, ClassUtil.getClassLoader());</span><br><span class="line">    <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">    initUrl();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// -------------------------------------------------------------------------------------- Constructor end</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获得Path</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> path</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.path;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获得绝对路径Path&lt;br&gt;</span></span><br><span class="line"><span class="comment">    * 对于不存在的资源，返回拼接后的绝对路径</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 绝对路径path</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getAbsolutePath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (FileUtil.isAbsolutePath(<span class="keyword">this</span>.path)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.path;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// url在初始化的时候已经断言，此处始终不为null</span></span><br><span class="line">    <span class="keyword">return</span> FileUtil.normalize(URLUtil.getDecodedPath(<span class="keyword">this</span>.url));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获得 &#123;<span class="doctag">@link</span> ClassLoader&#125;</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> ClassLoader&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ClassLoader <span class="title">getClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.classLoader;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据给定资源初始化URL</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != <span class="keyword">this</span>.clazz) &#123;</span><br><span class="line">      <span class="keyword">super</span>.url = <span class="keyword">this</span>.clazz.getResource(<span class="keyword">this</span>.path);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">null</span> != <span class="keyword">this</span>.classLoader) &#123;</span><br><span class="line">      <span class="keyword">super</span>.url = <span class="keyword">this</span>.classLoader.getResource(<span class="keyword">this</span>.path);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">super</span>.url = ClassLoader.getSystemResource(<span class="keyword">this</span>.path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> == <span class="keyword">super</span>.url) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NoResourceException(<span class="string">"Resource of path [&#123;&#125;] not exist!"</span>, <span class="keyword">this</span>.path);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">null</span> == <span class="keyword">this</span>.path) ? <span class="keyword">super</span>.toString() : <span class="string">"classpath:"</span> + <span class="keyword">this</span>.path;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 标准化Path格式</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> path Path</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 标准化后的path</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> String <span class="title">normalizePath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 标准化路径</span></span><br><span class="line">    path = FileUtil.normalize(path);</span><br><span class="line">    path = StrUtil.removePrefix(path, StrUtil.SLASH);</span><br><span class="line"></span><br><span class="line">    Assert.isFalse(FileUtil.isAbsolutePath(path), <span class="string">"Path [&#123;&#125;] must be a relative path !"</span>, path);</span><br><span class="line">    <span class="keyword">return</span> path;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>流的形式读取文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream inputStream = getClass().getClassLoader().getResourceAsStream(<span class="string">"templates/视频监控类导入模板.xls"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">while</span>((len = inputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">  httpServletResponse.getOutputStream().write(bytes,<span class="number">0</span>,len);</span><br><span class="line">&#125;</span><br><span class="line">nputStream.close();</span><br><span class="line">httpServletResponse.getOutputStream().close();</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>文件读取</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>VScode搭建GitHub稳定图床</title>
    <url>/2020/05/25/VScode%E6%90%AD%E5%BB%BAGitHub%E7%A8%B3%E5%AE%9A%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h1 id="VScode安装插件PicGo"><a href="#VScode安装插件PicGo" class="headerlink" title="VScode安装插件PicGo"></a>VScode安装插件PicGo</h1><p>需要用到PicGo这个插件，直接在VScode应用商店中搜索PicGo安装即可</p>
<hr>
<h1 id="PicGo的GitHub配置"><a href="#PicGo的GitHub配置" class="headerlink" title="PicGo的GitHub配置"></a>PicGo的GitHub配置</h1><h2 id="VScode中PicGo配置"><a href="#VScode中PicGo配置" class="headerlink" title="VScode中PicGo配置"></a>VScode中PicGo配置</h2><ul>
<li><p>打开文件-&gt;首选项-&gt;设置-&gt;扩展-&gt;PicGo，找到找到extensions中的Picgo的设置</p>
<ul>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200525121434.png" alt="20200525121434"></li>
</ul>
</li>
<li><p>往下找到GitHub，进行配置</p>
<ul>
<li><p><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200525121705.png" alt="20200525121705"></p>
</li>
<li><p>首先是PicGO-Core设为<code>github</code></p>
</li>
<li><p>Branch自己用Git命令查看分支，一般设为<code>master</code></p>
</li>
<li><p>Path要和Repo搭配使用，到时候上传的图片就会到Repo+Path目录下</p>
</li>
<li><p>最后一步token配置</p>
<ul>
<li>在GitHub上生成token</li>
<li>首先从头像那打开设置</li>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200525122457.png" alt="20200525122457"></li>
<li>找到最下面的Developer Settings:</li>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200525122612.png" alt="20200525122612"></li>
<li>从Personal Access里生成一个token，可以备份下次使用</li>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200525122654.png" alt="20200525122654"></li>
<li>最后把token复制到PicGo设置里的Github Token里就可以在vscode里使用图床了</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="图床命令"><a href="#图床命令" class="headerlink" title="图床命令"></a>图床命令</h1><p>三个基本命令：</p>
<ul>
<li><p>从文件目录手动插入图片</p>
<ul>
<li><code>ctrl+alt+e</code></li>
</ul>
</li>
<li><p>从剪贴板插入图片</p>
<ul>
<li><code>ctrl+alt+u</code></li>
</ul>
</li>
<li><p>从输入目录插入图片，相对目录和绝对目录都行</p>
<ul>
<li><code>ctrl+alt+o</code></li>
</ul>
</li>
</ul>
<hr>
<h1 id="访问配置"><a href="#访问配置" class="headerlink" title="访问配置"></a>访问配置</h1><p>图片的访问网址默认为<a href="https://raw.githubusercontent.com/xxx/xxxx/xxxxx" target="_blank" rel="noopener">https://raw.githubusercontent.com/xxx/xxxx/xxxxx</a></p>
<p>如果访问失败，需要修改host文件</p>
<ul>
<li>添加<code>199.232.68.133 raw.githubusercontent.com</code></li>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200525123734.png" alt="20200525123734"></li>
</ul>
]]></content>
      <categories>
        <category>IDE插件</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
