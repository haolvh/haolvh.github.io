<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>VScode搭建GitHub稳定图床</title>
    <url>/2020/05/25/VScode%E6%90%AD%E5%BB%BAGitHub%E7%A8%B3%E5%AE%9A%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<h1 id="VScode安装插件PicGo"><a href="#VScode安装插件PicGo" class="headerlink" title="VScode安装插件PicGo"></a>VScode安装插件PicGo</h1><p>需要用到PicGo这个插件，直接在VScode应用商店中搜索PicGo安装即可</p>
<hr>
<h1 id="PicGo的GitHub配置"><a href="#PicGo的GitHub配置" class="headerlink" title="PicGo的GitHub配置"></a>PicGo的GitHub配置</h1><h2 id="VScode中PicGo配置"><a href="#VScode中PicGo配置" class="headerlink" title="VScode中PicGo配置"></a>VScode中PicGo配置</h2><ul>
<li><p>打开文件-&gt;首选项-&gt;设置-&gt;扩展-&gt;PicGo，找到找到extensions中的Picgo的设置</p>
<ul>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200525121434.png" alt="20200525121434"></li>
</ul>
</li>
<li><p>往下找到GitHub，进行配置</p>
<ul>
<li><p><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200525121705.png" alt="20200525121705"></p>
</li>
<li><p>首先是PicGO-Core设为<code>github</code></p>
</li>
<li><p>Branch自己用Git命令查看分支，一般设为<code>master</code></p>
</li>
<li><p>Path要和Repo搭配使用，到时候上传的图片就会到Repo+Path目录下</p>
</li>
<li><p>最后一步token配置</p>
<ul>
<li>在GitHub上生成token</li>
<li>首先从头像那打开设置</li>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200525122457.png" alt="20200525122457"></li>
<li>找到最下面的Developer Settings:</li>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200525122612.png" alt="20200525122612"></li>
<li>从Personal Access里生成一个token，可以备份下次使用</li>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200525122654.png" alt="20200525122654"></li>
<li>最后把token复制到PicGo设置里的Github Token里就可以在vscode里使用图床了</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="图床命令"><a href="#图床命令" class="headerlink" title="图床命令"></a>图床命令</h1><p>三个基本命令：</p>
<ul>
<li><p>从文件目录手动插入图片</p>
<ul>
<li><code>ctrl+alt+e</code></li>
</ul>
</li>
<li><p>从剪贴板插入图片</p>
<ul>
<li><code>ctrl+alt+u</code></li>
</ul>
</li>
<li><p>从输入目录插入图片，相对目录和绝对目录都行</p>
<ul>
<li><code>ctrl+alt+o</code></li>
</ul>
</li>
</ul>
<hr>
<h1 id="访问配置"><a href="#访问配置" class="headerlink" title="访问配置"></a>访问配置</h1><p>图片的访问网址默认为<a href="https://raw.githubusercontent.com/xxx/xxxx/xxxxx" target="_blank" rel="noopener">https://raw.githubusercontent.com/xxx/xxxx/xxxxx</a></p>
<p>如果访问失败，需要修改host文件</p>
<ul>
<li>添加<code>199.232.68.133 raw.githubusercontent.com</code></li>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200525123734.png" alt="20200525123734"></li>
</ul>
]]></content>
      <categories>
        <category>IDE插件</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习</title>
    <url>/2020/05/21/Git%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="Git版本控制方式"><a href="#Git版本控制方式" class="headerlink" title="Git版本控制方式"></a>Git版本控制方式</h1><ul>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521124819.png" alt="20200521124819"></li>
<li>将工作目录的代码先提交到暂存区，然后再由暂存区提交到本地仓库</li>
</ul>
<h1 id="Git命令行操作"><a href="#Git命令行操作" class="headerlink" title="Git命令行操作"></a>Git命令行操作</h1><h2 id="本地库操作"><a href="#本地库操作" class="headerlink" title="本地库操作"></a>本地库操作</h2><h3 id="本地库初始化"><a href="#本地库初始化" class="headerlink" title="本地库初始化"></a>本地库初始化</h3><ul>
<li><p>进入到需要建立本地仓库的文件夹，执行<code>git init</code>命令，初始化后会生成隐藏文件夹.git</p>
<ul>
<li>注意：.git文件中存放的是本地库相关的子目录和文件，不要删除，也不要胡乱修改。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h4><ul>
<li><p>状态查看操作</p>
<ul>
<li><code>git status</code></li>
<li>查看工作区、暂存区状态</li>
</ul>
</li>
<li><p>添加操作</p>
<ul>
<li><code>git add [file name]</code></li>
<li>将工作区的“新建/修改”添加到暂存区</li>
</ul>
</li>
<li><p>提交操作</p>
<ul>
<li><code>git commit -m &quot;commit message&quot; [file name]</code></li>
<li>将暂存区的内容提交到本地库</li>
</ul>
</li>
<li><p><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521161438.png" alt="20200521161438"></p>
</li>
<li><p>查看历史记录</p>
<ul>
<li><p><code>git log</code></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521162217.png" alt="20200521162217"></p>
</li>
<li><p>多屏显示控制方式：</p>
<ul>
<li>空格向下翻页</li>
<li>b 向上翻页</li>
<li>q 退出</li>
</ul>
</li>
<li><p><code>git log --pretty=oneline</code></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521162537.png" alt="20200521162537"></p>
</li>
<li><p><code>git log --oneline</code></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521162712.png" alt="20200521162712"></p>
</li>
<li><p><code>git reflog</code></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521162815.png" alt="20200521162815"></p>
<ul>
<li>HEAD@{移动到当前版本需要多少步}</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h4 id="版本前进回退操作"><a href="#版本前进回退操作" class="headerlink" title="版本前进回退操作"></a>版本前进回退操作</h4><ul>
<li><p><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521164232.png" alt="20200521164232"></p>
</li>
<li><p><strong>基于索引值操作（最常用、推荐）</strong></p>
<ul>
<li><code>git reset --hard [局部索引值]</code></li>
<li><code>git reset --hard f932af0</code></li>
</ul>
</li>
<li><p>使用<code>^</code>符号：只能后退</p>
<ul>
<li><code>git reset --hard HEAD^</code></li>
<li>注意：一个<code>^</code>表示后退一步，n个表示后退n步</li>
</ul>
</li>
<li><p>使用<code>~</code>符号：只能后退</p>
<ul>
<li><code>git reset --hard HEAD~n</code></li>
<li>注意：表示后退n步</li>
</ul>
</li>
</ul>
<hr>
<h4 id="reset命令的三个参数对比"><a href="#reset命令的三个参数对比" class="headerlink" title="reset命令的三个参数对比"></a>reset命令的三个参数对比</h4><ul>
<li><p><code>--soft</code>参数</p>
<ul>
<li>仅仅在本地库移动HEDA指针</li>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521170218.png" alt="20200521170218"></li>
</ul>
</li>
<li><p><code>--mixed</code>参数</p>
<ul>
<li>在本地库移动HEAD指针</li>
<li>重置暂存区</li>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521170444.png" alt="20200521170444"></li>
</ul>
</li>
<li><p><code>--hard</code>参数</p>
<ul>
<li>在本地库移动HEDA指针</li>
<li>重置暂存区</li>
<li>重置工作区</li>
</ul>
</li>
</ul>
<hr>
<h4 id="删除文件并找回"><a href="#删除文件并找回" class="headerlink" title="删除文件并找回"></a>删除文件并找回</h4><ul>
<li>前提：删除前，文件存在时的状态提交到了本地库</li>
<li>操作：<code>git reset --hard [版本索引]</code></li>
</ul>
<hr>
<h4 id="比较文件差异"><a href="#比较文件差异" class="headerlink" title="比较文件差异"></a>比较文件差异</h4><ul>
<li><p><code>git diff [file name]</code></p>
<ul>
<li>将工作区中的文件和暂存区进行比较</li>
</ul>
</li>
<li><p><code>git diff [版本索引] [file name]</code></p>
<ul>
<li>将工作区中的文件和本地库历史记录进行比较</li>
</ul>
</li>
<li><p><code>git diff</code>  即不带文件名</p>
<ul>
<li>比较多个文件</li>
</ul>
</li>
</ul>
<hr>
<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="什么是分支"><a href="#什么是分支" class="headerlink" title="什么是分支"></a>什么是分支</h4><p>在版本控制中，使用多条线同时推进多个任务</p>
<ul>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521173339.png" alt="20200521173339"></li>
</ul>
<h4 id="分支的好处"><a href="#分支的好处" class="headerlink" title="分支的好处"></a>分支的好处</h4><ul>
<li>同时并行推进多个功能开发，提高开发效率</li>
<li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支由任何影响。失败的分支删除重新开始即可</li>
</ul>
<hr>
<h4 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h4><ul>
<li><p>创建分支</p>
<ul>
<li><code>git branch [分支名]</code></li>
</ul>
</li>
<li><p>查看分支</p>
<ul>
<li><p><code>git branch -v</code></p>
</li>
<li><p>查看远程分支</p>
<ul>
<li><code>git branch -r</code></li>
</ul>
</li>
<li><p>查看所有分支</p>
<ul>
<li><code>git branch -a</code></li>
</ul>
</li>
</ul>
</li>
<li><p>切换分支</p>
<ul>
<li><code>git checkout [分支名]</code></li>
</ul>
</li>
<li><p>将新分支推送到GitHub</p>
<ul>
<li><code>git push origin [分支名]</code></li>
</ul>
</li>
<li><p>删除本地分支</p>
<ul>
<li><code>git branch -d [分支名]</code></li>
</ul>
</li>
<li><p>删除Github远程分支</p>
<ul>
<li><code>git push origin :[分支名]</code></li>
<li>分支名前的<code>:</code>代表删除</li>
</ul>
</li>
<li><p>合并分支</p>
<ul>
<li><p>切换到接受修改的分支（被合并，增加新内容）上</p>
<ul>
<li><code>git checkout [被合并分支名]</code></li>
</ul>
</li>
<li><p>执行<code>merge</code>命令</p>
<ul>
<li><code>git merge [有新内容分支名]</code></li>
</ul>
</li>
</ul>
</li>
<li><p>强制提交本地分支覆盖远程分支</p>
<ul>
<li><code>git push origin [分支名] --force</code></li>
</ul>
</li>
<li><p>解决冲突</p>
<ul>
<li><p>分支的表现</p>
<ul>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200521174938.png" alt="20200521174938"></li>
</ul>
</li>
<li><p>冲突的解决</p>
<ul>
<li><p>编辑文件，删除特殊符号</p>
</li>
<li><p>把文件修改到满意的程度，保存退出</p>
</li>
<li><p><code>git add [文件名]</code></p>
</li>
<li><p><code>git commit -m &quot;日志信息&quot;</code></p>
<ul>
<li>注意：此时commit一定不能带具体文件名</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h2 id="GitHub远程库操作"><a href="#GitHub远程库操作" class="headerlink" title="GitHub远程库操作"></a>GitHub远程库操作</h2><h3 id="将本地库与远程库关联"><a href="#将本地库与远程库关联" class="headerlink" title="将本地库与远程库关联"></a>将本地库与远程库关联</h3><ul>
<li><p>查看远程库地址</p>
<ul>
<li><code>git remote -v</code></li>
</ul>
</li>
<li><p>关联远程库</p>
<ul>
<li><code>git remote add origin https://github.com/xxx/xxx.git</code></li>
<li><code>origin</code>即远程库地址的别名，用<code>origin</code>来代表远程库地址</li>
<li></li>
</ul>
</li>
<li><p><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200526162939.png" alt="20200526162939"></p>
</li>
</ul>
<hr>
<h3 id="推送操作"><a href="#推送操作" class="headerlink" title="推送操作"></a>推送操作</h3><ul>
<li><p><code>git push origin [分支名]</code></p>
</li>
<li><p><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200526163515.png" alt="20200526163515"></p>
</li>
</ul>
<hr>
<h3 id="克隆操作"><a href="#克隆操作" class="headerlink" title="克隆操作"></a>克隆操作</h3><ul>
<li><p>命令</p>
<ul>
<li><code>git clone [远程地址]</code></li>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200526164254.png" alt="20200526164254"></li>
</ul>
</li>
<li><p>效果</p>
<ul>
<li>完整的把远程库下载到本地</li>
<li>创建origin远程地址别名</li>
<li>初始化本地库</li>
</ul>
</li>
</ul>
<hr>
<h3 id="团队成员邀请"><a href="#团队成员邀请" class="headerlink" title="团队成员邀请"></a>团队成员邀请</h3><ul>
<li><p>项目仓库下settings-&gt;Collaborators</p>
</li>
<li><p>搜索需要添加的团队成员</p>
<ul>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200526165226.png" alt="20200526165226"></li>
</ul>
</li>
<li><p>复制邀请链接发送给需要添加的团队成员</p>
<ul>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200526165318.png" alt="20200526165318"></li>
</ul>
</li>
<li><p>需要添加的团队成员通过邀请链接接受邀请</p>
<ul>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200526165540.png" alt="20200526165540"></li>
</ul>
</li>
<li><p>成为团队成员就可正常推送，操作远程库</p>
</li>
</ul>
<hr>
<h3 id="远程库修改的拉取"><a href="#远程库修改的拉取" class="headerlink" title="远程库修改的拉取"></a>远程库修改的拉取</h3><ul>
<li><p>pull = fetch + merge</p>
</li>
<li><p><code>git fetch [远程库地址别名origin] [远程分支名]</code></p>
</li>
<li><p><code>git merge [远程库地址别名origin] [远程分支名]</code></p>
</li>
<li><p>拉取远程库</p>
<ul>
<li><code>git pull origin [远程分支名]</code></li>
</ul>
</li>
</ul>
<hr>
<h3 id="协同开发冲突的解决"><a href="#协同开发冲突的解决" class="headerlink" title="协同开发冲突的解决"></a>协同开发冲突的解决</h3><ul>
<li><p>要点</p>
<ul>
<li>如果不是基于GitHub远程库的最新版所做的修改，不能推送，必须先拉取</li>
<li>拉取下来后如果进入冲突状态，则按照“分支冲突解决”操作即可</li>
</ul>
</li>
</ul>
<hr>
<h3 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h3><p>例如：<strong>团队B在团队A的基础上开发</strong></p>
<h4 id="团队B"><a href="#团队B" class="headerlink" title="团队B"></a>团队B</h4><ul>
<li><p>进入团队A的项目仓库</p>
<ul>
<li><p>fork</p>
<ul>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200526171907.png" alt="20200526171907"></li>
<li><img src="https://raw.githubusercontent.com/haolvh/PicGo/master/image/20200526172111.png" alt="20200526172111"></li>
</ul>
</li>
<li><p>本地修改，然后推送到远程</p>
</li>
<li><p>pull request</p>
<ul>
<li>Pull request-&gt;New pull request-&gt;Create pull request(包含日志信息)</li>
</ul>
</li>
<li><p>开发完成</p>
</li>
</ul>
</li>
</ul>
<h4 id="团队A"><a href="#团队A" class="headerlink" title="团队A"></a>团队A</h4><ul>
<li><p>进入项目仓库</p>
<ul>
<li><p>审核</p>
<ul>
<li>Commits查看提交</li>
<li>Files changed 查看文件变化</li>
</ul>
</li>
<li><p>pull request</p>
<ul>
<li><p>Pull request-&gt;点击团队B的pull request</p>
</li>
<li><p>可以comment交流</p>
</li>
<li><p>审核</p>
<ul>
<li>Commits查看提交</li>
<li>Files changed 查看文件变化</li>
</ul>
</li>
<li><p>Merge pull request</p>
</li>
<li><p>添加日志信息</p>
</li>
<li><p>Confirm merge</p>
</li>
<li><p>合并完成</p>
</li>
<li><p>将远程库修改拉取到本地</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h3 id="配置SSH免密登录"><a href="#配置SSH免密登录" class="headerlink" title="配置SSH免密登录"></a>配置SSH免密登录</h3><ul>
<li><p>进入家目录</p>
<ul>
<li><code>cd ~</code></li>
</ul>
</li>
<li><p>删除之前的.ssh目录</p>
<ul>
<li><code>rm -r .ssh/</code></li>
</ul>
</li>
<li><p>生成.ssh目录</p>
<ul>
<li><code>ssh-keygen -t rsa -C  [邮箱信息]</code></li>
<li>默认回车</li>
</ul>
</li>
<li><p>进入.ssh目录</p>
<ul>
<li><code>cd .ssh/</code></li>
</ul>
</li>
<li><p>将<code>id_rsa.pub</code>文件中的内容复制</p>
</li>
<li><p>在Github上Settings-&gt;SSH and GPG keys-&gt;New SSH key-&gt;将复制内容粘贴-&gt;Add SSH key</p>
</li>
<li><p>新建远程库地址别名</p>
<ul>
<li><code>git remote add origin [仓库SSH的值]</code></li>
</ul>
</li>
<li><p>完成推送</p>
</li>
<li><p>不需要输入账户密码，配置完成</p>
</li>
</ul>
<hr>
<h1 id="Git在IDEA工具中的使用"><a href="#Git在IDEA工具中的使用" class="headerlink" title="Git在IDEA工具中的使用"></a>Git在IDEA工具中的使用</h1><ul>
<li><a href="https://www.bilibili.com/video/BV16E411N7pe" target="_blank" rel="noopener">Git在IDEA工具中的使用</a></li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
